import asyncio
import logging
import spacy
from aiogram import types
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db import create_pool, init_db, save_products, load_category_mappings
from parsers import parse_all
from bot_instance import bot


BASKETS = {}
USER_CITIES = {}
ORDER_HISTORY = {}
CATEGORY_ID_MAP = {'–ü—Ä–æ–¥—É–∫—Ç—ã': {}}
CATEGORY_NAME_MAP = {'–ü—Ä–æ–¥—É–∫—Ç—ã': {}}
SUBCATEGORY_ID_MAP = {'–ü—Ä–æ–¥—É–∫—Ç—ã': {}}
SUBCATEGORY_NAME_MAP = {'–ü—Ä–æ–¥—É–∫—Ç—ã': {}}
MAPPINGS_LOADED = False
PRODUCTS_PER_PAGE = 5

# -------------------------------
# –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
# -------------------------------
async def update_all_regions():
    regions = ["almaty", "astana", "shymkent"]
    all_products = []
    for region in regions:
        # parse_all ‚Äì –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
        products = await parse_all(city=region)
        all_products.extend(products)
    return all_products

async def periodic_update():
    # –ñ–¥–µ–º 3 –¥–Ω—è (259200 —Å–µ–∫—É–Ω–¥) –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
    while True:
        await asyncio.sleep(259200)
        try:
            products = await update_all_regions()
            pool = await create_pool()
            await init_db(pool)
            await save_products(pool, products)
            await load_category_mappings()
            await pool.close()
            logging.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

# -------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
# -------------------------------
async def delete_message_later(chat_id, message_id, delay=120):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")

def get_user_city(user_id):
    return USER_CITIES.get(user_id, "almaty")

def parse_price(price_str):
    try:
        return float("".join(ch for ch in price_str if ch.isdigit() or ch == '.'))
    except (ValueError, TypeError):
        return float('inf')

def compute_similarity(text1, text2):
    doc1 = nlp(text1)
    doc2 = nlp(text2)
    return doc1.similarity(doc2)

def get_first_available_photo(rows):
    for row in rows:
        image = row.get("image")
        if image and image.strip():
            fixed_image = image.replace("%w", "600").replace("%h", "600")
            return fixed_image
    return "https://via.placeholder.com/150"

async def send_main_menu(message: types.Message):
    user_id = message.from_user.id
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üõç –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="select_store"),
        InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet")
    )

    builder.row(
        InlineKeyboardButton(text="üë®‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="other_menu")
    )
    
    keyboard = builder.as_markup()
    await message.answer(
        "üìå <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard, parse_mode="HTML"
    )

async def send_other_menu(message: types.Message):
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="basket"),
        InlineKeyboardButton(text="üì© –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data="support")
    )
    
    builder.row(
        InlineKeyboardButton(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="city:change")
    )
    
    keyboard = builder.as_markup()
    await message.answer(
        "üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", reply_markup=keyboard
    )

nlp = spacy.load("ru_core_news_sm")