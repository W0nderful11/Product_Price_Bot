import aiohttp
import os
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states import SupportState
from utils import send_main_menu
from states import AiState
from aiogram.filters import Command
from dotenv import load_dotenv

misc_router = Router()
ADMIN_ID = int(os.getenv("ADMIN_ID"))
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

@misc_router.callback_query(lambda c: c.data == "support")
async def support_callback_handler(callback_query: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        [InlineKeyboardButton(text="‚úâ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="support_write")],
        [InlineKeyboardButton(text="ü§ñ –û—Ç–≤–µ—Ç –æ—Ç –ò–ò", callback_data="ai")]
    ])

    await callback_query.message.answer(
        "üì© –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @mikoto699", reply_markup=keyboard
    )
    await callback_query.answer()

@misc_router.callback_query(lambda c: c.data == "support_write")
async def support_write_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
    await state.set_state(SupportState.waiting_for_message)
    await callback_query.message.answer("üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–∏—Å—å–º–æ ‚Äì –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await callback_query.answer()

@misc_router.message(SupportState.waiting_for_message)
async def process_support_message(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    user_info = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username and ('@' + message.from_user.username) or message.from_user.full_name} (ID: {message.from_user.id}):"
    await message.bot.send_message(ADMIN_ID, f"{user_info}\n\n{message.text}")

    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await state.clear()
    await send_main_menu(message)

@misc_router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_handler(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await send_main_menu(callback_query.message)
    await callback_query.answer()

@misc_router.message(Command("ai"))
async def ai_command_handler(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ AI."""
    await state.set_state(AiState.waiting_for_query)
    context_text = (
        "ü§ñ –Ø –ø–æ–º–æ—â–Ω–∏–∫ Stratton –ø–æ –ø–æ–∫—É–ø–∫–µ –µ–¥—ã.\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "- üõç –ü—Ä–æ–¥—É–∫—Ç—ã\n"
        "- üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        "- üîé –ü–æ–∏—Å–∫\n\n"
        "- - üì© –û—Å—Ç–∞–ª—å–Ω–æ–µ\n"
        "‚úè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è AI:"
    )
    await message.answer(context_text)

@misc_router.callback_query(lambda c: c.data == "ai")
async def ai_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ AI —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."""
    await state.set_state(AiState.waiting_for_query)
    context_text = (
        "ü§ñ –Ø –ø–æ–º–æ—â–Ω–∏–∫ Stratton –ø–æ –ø–æ–∫—É–ø–∫–µ –µ–¥—ã.\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "- üõç –ü—Ä–æ–¥—É–∫—Ç—ã\n"
        "- üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        "- üîé –ü–æ–∏—Å–∫\n\n"
        "- - üì© –û—Å—Ç–∞–ª—å–Ω–æ–µ\n"
        "‚úè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è AI:"
    )
    await callback_query.message.answer(context_text)
    await callback_query.answer("üöÄ –§—É–Ω–∫—Ü–∏—è AI –∑–∞–ø—É—â–µ–Ω–∞.", show_alert=True)

@misc_router.message(AiState.waiting_for_query)
async def process_ai_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ AI —á–µ—Ä–µ–∑ API Gemini."""
    user_prompt = message.text.strip()
    prompt = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ Stratton –ø–æ –ø–æ–∫—É–ø–∫–µ –µ–¥—ã. " + user_prompt

    if not GEMINI_API_KEY:
        await message.answer("‚ùå AI-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        await state.clear()
        return

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    headers = {"Content-Type": "application/json"}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers, timeout=10) as resp:
                if resp.status != 200:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ AI: {resp.status}")
                    await state.clear()
                    return
                result = await resp.json()
        ai_response = (result.get("candidates", [{}])[0]
                       .get("content", {})
                       .get("parts", [{}])[0]
                       .get("text", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."))
    except Exception:
        ai_response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."

    await message.answer(f"ü§ñ <b>–û—Ç–≤–µ—Ç AI:</b>\n{ai_response}", parse_mode="HTML")
    await state.clear()
    await send_main_menu(message)

@misc_router.callback_query(lambda c: c.data == "other_menu")
async def support_callback_handler(callback_query: types.CallbackQuery):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥."""
    context_text = (
        "üõ† <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º, "
        "–≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é.\n\n"
        "üì© <b>–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:</b> @mikoto699"
    )

    await callback_query.message.answer(
        context_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    await callback_query.answer()
    
