from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ContentType,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils import send_main_menu, USER_CITIES
from bot_instance import bot

start_router = Router()

class RegistrationState(StatesGroup):
    choosing_city = State()
    sharing_contact = State()

INSTRUCTION_TEXT = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

üîπ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?</b>
- üõç <b>"–ü—Ä–æ–¥—É–∫—Ç—ã"</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤.
- üë§ <b>"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"</b> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö.
- üë®‚Äçüíª <b>"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"</b> ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.
"""

async def send_city_selection(chat_id, is_new_user=True):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞."""
    buttons = [
        [InlineKeyboardButton(text="üèîÔ∏è –ê–ª–º–∞—Ç—ã", callback_data="city:almaty")],
        [InlineKeyboardButton(text="üèôÔ∏è –ê—Å—Ç–∞–Ω–∞", callback_data="city:astana")],
        [InlineKeyboardButton(text="‚òÄÔ∏è –®—ã–º–∫–µ–Ω—Ç", callback_data="city:shymkent")],
    ]

    if not is_new_user:
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_city_change")])

    builder = InlineKeyboardMarkup(inline_keyboard=buttons)

    text = "üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:" if is_new_user else "üåç –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:"
    await bot.send_message(chat_id, text, reply_markup=builder)

@start_router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥, –∑–∞—Ç–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω."""
    await state.set_state(RegistrationState.choosing_city)
    await send_city_selection(message.chat.id, is_new_user=True)

@start_router.callback_query(lambda c: c.data.startswith("city:"), RegistrationState.choosing_city)
async def city_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–æ—Ä–æ–¥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–±–æ—Ä–µ."""
    city_code = callback_query.data.split(":")[1]
    
    USER_CITIES[callback_query.from_user.id] = city_code
    await state.update_data(city=city_code)

    await callback_query.message.answer(
        f"üåç –í–∞—à –≥–æ—Ä–æ–¥: {city_code.capitalize()} –≤—ã–±—Ä–∞–Ω!\n\nüì≤ –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
    )

    share_button = KeyboardButton(text="üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[share_button]], resize_keyboard=True, one_time_keyboard=True
    )

    await state.set_state(RegistrationState.sharing_contact)
    await callback_query.message.answer("üë§ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", reply_markup=keyboard)
    await callback_query.answer()

@start_router.callback_query(lambda c: c.data.startswith("city:"))
async def change_city_callback_handler(callback_query: types.CallbackQuery):
    """–ò–∑–º–µ–Ω—è–µ—Ç –≥–æ—Ä–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    city_code = callback_query.data.split(":")[1]
    
    USER_CITIES[callback_query.from_user.id] = city_code
    await callback_query.message.answer(f"üåç –í–∞—à –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {city_code.capitalize()}!")

    await callback_query.message.answer(INSTRUCTION_TEXT, parse_mode="HTML")

    await send_main_menu(callback_query.message)

    await callback_query.answer()

@start_router.callback_query(lambda c: c.data == "cancel_city_change")
async def cancel_city_change_handler(callback_query: types.CallbackQuery):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
    await callback_query.message.answer("‚úÖ –ì–æ—Ä–æ–¥ –Ω–µ –∏–∑–º–µ–Ω—ë–Ω.")

    await callback_query.message.answer(INSTRUCTION_TEXT, parse_mode="HTML")

    await send_main_menu(callback_query.message)

    await callback_query.answer()

@start_router.message(RegistrationState.sharing_contact, lambda message: message.content_type == ContentType.CONTACT)
async def contact_handler(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /city.")

    await message.answer(INSTRUCTION_TEXT, parse_mode="HTML")

    await state.clear()
    await send_main_menu(message)

@start_router.message(Command("city"))
async def city_handler(message: types.Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    await send_city_selection(message.chat.id, is_new_user=False)
    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–∏–π.")
