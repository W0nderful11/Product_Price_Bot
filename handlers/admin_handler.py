import logging
from aiogram import Router, types
from aiogram.filters import Command
from db import create_pool, init_db, save_products, load_category_mappings
from utils import send_main_menu, update_all_regions
import os

admin_router = Router()
ADMIN_ID = int(os.getenv("ADMIN_ID"))

@admin_router.message(Command("update"))
async def update_handler(message: types.Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
        return

    await message.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

    try:
        products = await update_all_regions()
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
        await message.answer("–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @mikoto699")
        logging.error(error_text)
        return

    pool = await create_pool()
    await init_db(pool)
    await save_products(pool, products)
    await load_category_mappings()
    await pool.close()

    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    await send_main_menu(message)
