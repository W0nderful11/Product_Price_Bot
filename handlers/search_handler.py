import html
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db import create_pool
from states import SearchState
from utils import PRODUCTS_PER_PAGE

from parsers.arbuz_parser import parse_arbuz
from parsers.clever_parser import parse_clevermarket
from parsers.kaspi_parser import parse_kaspi

search_router = Router()

@search_router.message(Command("search"))
async def search_command_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /search –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω."""
    await state.clear()
    await message.answer("üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=get_store_selection_keyboard())

@search_router.callback_query(lambda c: c.data == "select_store")
async def select_store_callback_handler(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤."""
    await callback_query.message.answer("üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=get_store_selection_keyboard())
    await callback_query.answer()

def get_store_selection_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçâ –ê—Ä–±—É–∑", callback_data="store:arbuz")],
        [InlineKeyboardButton(text="üçÄ –ö–ª–µ–≤–µ—Ä", callback_data="store:klever")],
        [InlineKeyboardButton(text="üåä –ö–∞—Å–ø–∏", callback_data="store:kaspi")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

@search_router.callback_query(lambda c: c.data.startswith("store:"))
async def store_selection_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞' –∏ '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω' –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞."""
    store = callback_query.data.split(":")[1]
    await state.update_data(search_store=store)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", callback_data="search_product")],
        [InlineKeyboardButton(text="üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω", callback_data="search_compare")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="select_store")]
    ])

    await callback_query.message.answer(f"üè™ –í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: <b>{store.capitalize()}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode="HTML", reply_markup=keyboard)
    await callback_query.answer()

@search_router.callback_query(lambda c: c.data == "search_product")
async def search_mode_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    await callback_query.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchState.waiting_for_query)
    await callback_query.answer()

@search_router.message(SearchState.waiting_for_query)
async def search_query_handler(message: types.Message, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ."""
    data = await state.get_data()
    store = data.get("search_store", "arbuz").capitalize()
    query = f"%{message.text.lower()}%"

    pool = await create_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT id, name, price, source, link, image FROM products "
            "WHERE source = $1 AND LOWER(name) LIKE $2 ORDER BY price ASC LIMIT 10",
            store, query
        )
    await pool.close()

    if not rows:
        await message.answer(f"‚ùå –í {store} –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}'.")
        return

    texts = [
        f"üìå <b>{html.escape(row['name'])}</b>\n"
        f"üí∞ –¶–µ–Ω–∞: {html.escape(row['price'])}‚Ç∏\n"
        f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {html.escape(row['source'])}\n"
        f"üîó <a href=\"{row['link']}\">–°—Å—ã–ª–∫–∞</a>"
        for row in rows
    ]

    result_text = "\n\n".join(texts)
    photo_url = next((row["image"] for row in rows if row.get("image")), None)

    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="store:"+store.lower())
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    keyboard = builder.as_markup()

    if photo_url:
        try:
            await message.answer_photo(photo_url, caption=result_text, parse_mode="HTML", reply_markup=keyboard)
        except Exception:
            await message.answer(result_text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer(result_text, parse_mode="HTML", reply_markup=keyboard)

    await state.clear()

async def compare_prices(query):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä –≤–æ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö."""
    results = []

    for parser, name in [
        (parse_arbuz, "–ê—Ä–±—É–∑"),
        (parse_clevermarket, "–ö–ª–µ–≤–µ—Ä"),
        (parse_kaspi, "–ö–∞—Å–ø–∏")
    ]:
        result = await parser(query)
        results.append(f"{name}: {result}")

    return f"üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ '{query}':</b>\n\n" + "\n\n".join(results)

@search_router.callback_query(lambda c: c.data == "search_compare")
async def search_compare_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω."""
    await callback_query.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö:")
    await state.set_state(SearchState.waiting_for_query)
    await callback_query.answer()
