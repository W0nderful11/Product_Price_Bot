from aiogram import types, F, Router
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã
from parsers.arbuz_parser import parse_arbuz
from parsers.clever_parser import parse_clevermarket
from parsers.kaspi_parser import parse_kaspi

search_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
class SearchStates(StatesGroup):
    waiting_for_search_query = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è (–µ—Å–ª–∏ –Ω–∞–¥–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ç)
def get_functional_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="menu")],
        [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–∫–∞–∑", callback_data="repeat_order")],
        [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞", callback_data="basket")],
        [InlineKeyboardButton(text="–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data="support")],
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç –æ—Ç –ò–ò", callback_data="ai")],
        [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", callback_data="search")]
    ])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
def get_search_mode_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ –ê—Ä–±—É–∑—É", callback_data="search_arbuz")],
        [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ –ö–ª–µ–≤–µ—Ä—É", callback_data="search_klever")],
        [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ –ö–∞—Å–ø–∏", callback_data="search_kaspi")],
        [InlineKeyboardButton(text="üîé –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –≤—Å–µ–º", callback_data="search_compare")]
    ])


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞"
@search_router.callback_query(F.data == "search")
async def search_callback_handler(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_mode_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
@search_router.callback_query(F.data.startswith('search_'))
async def search_by_store(callback: types.CallbackQuery, state: FSMContext):
    store = callback.data.replace('search_', '')
    await state.update_data(search_store=store)

    if store == 'compare':
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö:")
    else:
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ {store.capitalize()}:")

    await state.set_state(SearchStates.waiting_for_search_query)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –≤—ã–∑–æ–≤ –Ω—É–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
@search_router.message(F.text, SearchStates.waiting_for_search_query)
async def process_search_query(message: types.Message, state: FSMContext):
    data = await state.get_data()
    store = data.get('search_store')
    query = message.text.strip()

    if store == 'arbuz':
        result = await parse_arbuz(query)
    elif store == 'klever':
        result = await parse_clevermarket(query)
    elif store == 'kaspi':
        result = await parse_kaspi(query)
    elif store == 'compare':
        result = await compare_prices(query)
    else:
        result = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω."

    await message.answer(result)
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω
async def compare_prices(query):
    results = []

    for parser, name in [
        (parse_arbuz, "–ê—Ä–±—É–∑"),
        (parse_clevermarket, "–ö–ª–µ–≤–µ—Ä"),
        (parse_kaspi, "–ö–∞—Å–ø–∏")
    ]:
        result = await parser(query)
        results.append(f"{name}: {result}")

    return f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ '{query}':\n\n" + "\n\n".join(results)
